#!/bin/sh
# Tcl ignores the next line -*- tcl -*- \
    exec wish "$0" -- "$@"

package require Tk
package require ctext

################################################################
# functions

proc not_implemented {title} {
	tk_messageBox -title $title -message "command not implemented"
}

# exit program
proc do_quit {} {
	# workaround:
	# without `wm withdraw .', x11 lost key input when program exit
	wm withdraw .
	destroy .
}

# append name to combobox
proc append_file_name {name} {
	set files [.file.name cget -values]
	if {[lsearch -exact $files $name] < 0} {
		.file.name configure -values [concat $files $name]
	}
}


# read file and insert its content into text widget
proc read_file {w name} {
	global filename
	if {!([file isfile $name] && [file readable $name])} {
		return
	}

	set filename $name
	set f [open $filename r]

	# set combobox, label
	append_file_name $name
	set_file_number

	# erase previous content
	$w configure -state normal
	$w delete 1.0 end

	# cancel previous read_file_internal event
	foreach i [after info] {
		after cancel $i
	}

	# read asynchronous
	read_file_internal $w $f
}

# this procedure is called by read_file
proc read_file_internal {w f} {
	if {![eof $f]} {
		# save position
		set pos [$w index insert]
		$w configure -state normal
		$w insert end [read $f 1024]
		$w configure -state disabled
		# restore position
		$w mark set insert $pos
		after 10 "read_file_internal $w $f"
	} else {
		close $f
	}
}

# prepare commands
proc get_ready {} {
	global preceding_number
	focus .ctext.t
	set preceding_number ""
}

# cancel action, ready to command
proc do_cancel {} {
	get_ready
}

# append digit to precedence number
proc do_number {d} {
	global preceding_number
	set preceding_number [string cat $preceding_number $d]
}

# open (examine) new file
proc do_examine {} {
	set name [.file.name get]
	read_file .ctext $name
	get_ready
}

# set file label "current/max"
proc set_file_number {} {
	set cur [expr 1 + [.file.name current]]
	set max [llength [.file.name cget -values]]
	.file.number configure -text "$cur/$max"
}

# return preceding number or default
# d: if no preceding_number, return d
proc get_precedence {d} {
	global preceding_number
	if {$preceding_number ne ""} {
		return $preceding_number
	} else {
		return $d
	}
}

# scroll line.
# cursor(insert) is moved also.
# sign: + or -
# num: number of lines to scroll
proc scroll_line {sign num} {
	set w .ctext

	set pos [expr [$w index insert] $sign $num]
	$w mark set insert $pos
	$w yview insert
	get_ready
}

# scroll lines forward
proc do_forward_line {{sign +}} {
	scroll_line $sign [get_precedence 1]
}

# scroll lines backward
proc do_backward_line {} {
	do_forward_line -
}

# calculate number of lines in a window
proc calculate_window_lines {w} {
	$w count -lines [$w index @0,0] [$w index @0,[winfo height $w]]
}

# scroll pages
proc scroll_page {sign} {
	global window_lines
	if {$window_lines ne ""} {
		scroll_line $sign $window_lines
	} else {
		scroll_line $sign [calculate_window_lines .ctext]
	}
}

# scroll pages forward
proc do_forward_page {{sign +}} {
	set num [get_precedence 0]
	if {$num eq 0} {
		scroll_page $sign
	} else {
		scroll_line $sign $num
	}
}

# scroll pages backward
proc do_backward_page {} {
	do_forward_page -
}


# scroll pages forward and set
proc do_forward_page_set {{sign +}} {
	global window_lines
	set num [get_precedence 0]
	if {$num > 0} {
		# set window line size
		set window_lines $num
	}
	scroll_page $sign
}

# scroll pages backward and set
proc do_backward_page_set {} {
	do_forward_page_set -
}

# scroll forward half page and set
proc do_forward_window_half_set {{sign +}} {
	global half_window_lines
	set num [get_precedence 0]

	if {$num > 0} {
		# set half window line size
		set half_window_lines $num
	}

	if {$half_window_lines eq ""} {
		# calculate half window lines
		# half_window_lines is unchanged
		set w .ctext
		set num [expr [calculate_window_lines $w] / 2]
	} else {
		set num $half_window_lines
	}
	scroll_line $sign $num
}

# scroll backward half page and set
proc do_backward_window_half_set {} {
	do_forward_window_half_set -
}

# version
proc do_version {} {
	tk_messageBox -title "tklessview" -message "less-like text viewer"
}

# help
proc do_help {} {
	tk_messageBox -title "help" -message "<q>	quit
j	forward line
k	backward line
f	forward page
b	backward page
:e	examine file
"
}

# go to line num in the file
proc goto_line {num} {
	set w .ctext
	$w mark set insert $num.0
	$w yview insert
	get_ready
}

# go to last
proc goto_last {} {
	set w .ctext
	$w mark set insert end
	$w yview insert
	# move cursor to top of widget
	$w mark set insert [$w index @0,0]
	get_ready
}

# go to first or preceding_number line
proc do_goto_first {} {
	set num [get_precedence 1]
	goto_line $num
}

# go to last or preceding_number line
proc do_goto_last {} {
	set num [get_precedence ""]
	if {$num ne ""} {
		goto_line $num
	} else {
		goto_last
	}
}

# move to $preceded_number percent of whole buffer
proc do_goto_percent {} {
	set num [get_precedence 0]
	set fraction [expr $num / 100.0]
	set w .ctext
	$w yview moveto $fraction
	# move cursor to top of widget
	$w mark set insert [$w index @0,0]

	get_ready
}

# tag search_string and search next
proc tag_text {} {
	global search_string
	global highlighted

	set highlighted 1
	set w .ctext

	$w tag delete search
	$w tag configure search -foreground yellow -background red
	set curs [$w search -regexp -nocase -all -count lengths "$search_string" 1.0 end]
	for {set i 0} {[lindex $curs $i] ne ""} {incr i} {
		$w tag add search [lindex $curs $i] "[lindex $curs $i] + [lindex $lengths $i] char"
	}
}

# search for new string
proc do_search {} {
	global search_forwards
	tag_text
	repeat_search $search_forwards
}

# prompt to search forward
proc do_search_forward {} {
	global search_forwards
	set search_forwards 1
	.file.sl configure -text "/"
	focus .file.se
}

# prompt to search backward
proc do_search_backward {} {
	global search_forwards
	set search_forwards 0
	.file.sl configure -text "?"
	focus .file.se
}

# move to next/prev search tag
proc repeat_search {forwards} {
	set w .ctext
	# search count
	set count [get_precedence 1]
	# current cursor positoin
	set cur [$w index insert]

	while {$count > 0} {
		# search tagname "search"
		# if found, return first and last range of character
		if {$forwards} {
			set range [$w tag nextrange search "$cur + 1 char"]
		} else {
			set range [$w tag prevrange search "$cur - 1 char"]
		}

		# not found
		if {$range eq ""} {
			return
		}
		# store first character found
		set cur [lindex $range 0]
		incr count -1
	}

	set index [lindex $range 0]
	$w mark set insert $index
	$w yview insert
	get_ready
}

# move to next search tag
proc do_repeat_next_search {} {
	global search_forwards
	repeat_search $search_forwards
}

# move to previous search tag
proc do_repeat_previous_search {} {
	global search_forwards
	repeat_search [expr !$search_forwards]
}

proc do_toggle_highlight {} {
	global highlighted
	set w .ctext
	set tag search

	if {$highlighted} {
		$w tag configure $tag -foreground black -background white
	} else {
		$w tag configure $tag -foreground yellow -background red
	}
	set highlighted [expr !$highlighted]
}

################################################################
# variables

# number, used by various command
set preceding_number ""

# current file name
set filename ""

# scroll page size
set window_lines ""

# half scroll page size
set half_window_lines ""

# search string
set search_string ""

# search direction
set search_forwards 1

# highlight matched string
set highlighted 1

################################################################
# main window

# filename widget
frame .file
ttk::combobox .file.name -textvariable filename
label .file.number -text "0/0"
pack .file.number .file.name -side left
pack .file

# search widget
label .file.sl -text "/"
entry .file.se -textvariable search_string
pack .file.sl .file.se -side left

# debug tcl command widget
frame .tcl
label .tcl.l -text {run tcl command: }
entry .tcl.e -textvariable tclscript
pack .tcl.l .tcl.e -side left
pack .tcl
bind .tcl.e <Return> { eval $tclscript }

# text widget
ctext .ctext -yscrollcommand ".scroll set" -setgrid true -wrap none
ttk::scrollbar .scroll -command ".ctext yview"
pack .scroll -side right -fill y
pack .ctext -expand yes -fill both
.ctext configure -state disabled

################################################################
# commands

# exit program
bind .ctext <q> do_quit
bind .ctext <Q> do_quit
bind .ctext <colon><q> do_quit
bind .ctext <colon><Q> do_quit
bind .ctext <Z><Z> do_quit

# scrolling
foreach seq {e Control-e j J Control-n Return Down} {
	bind .ctext <$seq> {do_forward_line}
}
foreach seq {y Control-y k K Control-k Control-p Up} {
	bind .ctext <$seq> {do_backward_line}
}
foreach seq {f Control-f Control-v space Next} {
	bind .ctext <$seq> {do_forward_page}
}
foreach seq {b Control-b Alt-v Shift-space Prior} {
	bind .ctext <$seq> {do_backward_page}
}
bind .ctext <z> {do_forward_page_set}
bind .ctext <w> {do_backward_page_set}
foreach seq {d Control-d} {
	bind .ctext <$seq> {do_forward_window_half_set}
}
foreach seq {u Control-u} {
	bind .ctext <$seq> {do_backward_window_half_set}
}

# cancel
bind . <Escape> do_cancel

# number
bind .ctext 0 {do_number %K}
bind .ctext 1 {do_number %K}
bind .ctext 2 {do_number %K}
bind .ctext 3 {do_number %K}
bind .ctext 4 {do_number %K}
bind .ctext 5 {do_number %K}
bind .ctext 6 {do_number %K}
bind .ctext 7 {do_number %K}
bind .ctext 8 {do_number %K}
bind .ctext 9 {do_number %K}

# file open prompt
bind .ctext <colon><e> {focus .file.name}
bind .ctext <colon><n> {not_implemented do_next_file}
bind .ctext <colon><p> {not_implemented do_previous_file}
bind .ctext <colon><x> {not_implemented do_nth_file}
bind .ctext <colon><d> {not_implemented do_remove_file}
# open (examine) new file
bind .file.name <Return> {do_examine}

# searching
bind .ctext <slash> {do_search_forward}
bind .ctext <question> {do_search_backward}
bind .ctext <Alt-u> {do_toggle_highlight}
bind .ctext <n> {do_repeat_next_search}
bind .ctext <N> {do_repeat_previous_search}
bind .file.se <Return> {do_search}

# jumping
foreach seq {g less Alt-less} {
	bind .ctext <$seq> {do_goto_first}
}
foreach seq {G greater Alt-greater} {
	bind .ctext <$seq> {do_goto_last}
}
bind .ctext <p> {do_goto_percent}
bind .ctext <percent> {do_goto_percent}

# set mark
bind .ctext <m> {not_implemented do_set_mark}
# jump mark
bind .ctext <apostrophe> {not_implemented do_jump_mark}

# miscellaneous commands
# edit current file with editor
bind .ctext <v> {not_implemented do_editor}
# version
bind .ctext <V> {do_version}
# help
bind .ctext <h> {do_help}
bind .ctext <H> {do_help}

# run tcl command
bind .ctext <exclam> "focus .tcl.e"

################################################################
# program start

# fill combobox with $argv
.file.name configure -values $argv

# read first argument
set filename [lindex [.file.name cget -values] 0]
read_file .ctext $filename

# wait the command
focus .ctext.t

# Local variables:
# indent-tabs-mode: t
# tab-width: 4
# End:
